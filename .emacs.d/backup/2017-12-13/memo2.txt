<!-- markdown-toc start - Don't edit this section. Run M-x markdown-toc-generate-toc again -->
**Table of Contents**

- [タスク名　プロフィールの詳細を決める．](#タスク名プロフィールの詳細を決める)
    - [プロフィールの必要な要素の選定．](#プロフィールの必要な要素の選定)
        - [清家くん想定](#清家くん想定)
        - [LINEAPIから持ってこれる情報](#lineapiから持ってこれる情報)
        - [リファレンス](#リファレンス)
- [プロフィール設計の相談](#プロフィール設計の相談)
    - [清家くんの想定した，プロフィール](#清家くんの想定したプロフィール)
    - [私的な見解](#私的な見解)
        - [目的を分解して，利用目的と利用意欲にすることを提案します](#目的を分解して利用目的と利用意欲にすることを提案します)
    - [プロフィール登録案1](#プロフィール登録案1)
- [修正したプロフィール設計の相談](#修正したプロフィール設計の相談)
    - [清家くんの想定した，プロフィール](#清家くんの想定したプロフィール)
    - [私的な見解](#私的な見解)
        - [目的を分解して，利用目的と利用意欲にすることを提案します.](#目的を分解して利用目的と利用意欲にすることを提案します)
    - [プロフィール登録案1](#プロフィール登録案1)
    - [プロフィール最終案](#プロフィール最終案)
- [プロフィール　DBを考えるタスク(プロフィールを入力できるようにする．)](#プロフィールdbを考えるタスクプロフィールを入力できるようにする)
    - [プロフィール内容](#プロフィール内容)
    - [DB_profiles_テーブル設計方針](#dbprofilesテーブル設計方針)
    - [sqlite](#sqlite)
    - [マイグレーションリセット](#マイグレーションリセット)
    - [マイグレーション](#マイグレーション)
        - [enum](#enum)
        - [dbアプリ](#dbアプリ)
        - [エラー](#エラー)
        - [enumはなし．](#enumはなし)
        - [ユーザー登録](#ユーザー登録)
        - [railsチュートリアル7章を参考に，](#railsチュートリアル7章を参考に)
        - [loginのremember_me](#loginのrememberme)
        - [routes](#routes)
        - [レンダー](#レンダー)
        - [スライドの入力フォーム](#スライドの入力フォーム)
        - [loginedの画面状態](#loginedの画面状態)
        - [形態素解析?](#形態素解析)
        - [db設計](#db設計)
        - [bundle_](#bundle)
            - [user_idを同時に挿入する](#useridを同時に挿入する)
        - [削除](#削除)
            - [暇人さんに相談した内容](#暇人さんに相談した内容)
        - [TODO](#todo)
        - [やったこと](#やったこと)
            - [each do](#each-do)
    - [フィードバック](#フィードバック)
    - [rails](#rails)
        - [@](#)
        - [スコープ](#スコープ)
        - [グローバル変数](#グローバル変数)
        - [クラス変数](#クラス変数)
        - [ローカル変数](#ローカル変数)
        - [findを詳しく解説してる](#findを詳しく解説してる)
        - [cssの読み込みの順番](#cssの読み込みの順番)
        - [暇人さんに相談した内容](#暇人さんに相談した内容)
        - [bootswatch](#bootswatch)

<!-- markdown-toc end -->
# タスク名　プロフィールの詳細を決める．
## プロフィールの必要な要素の選定．
### 清家くん想定
* 性別 整数型int,or文字列定数型enumでmale,femaleの二者択一にする．
* 年齢 
* 職業 string
* 趣味 string
* 目的 enum
* ユーザー名 string

### LINEAPIから持ってこれる情報

プロパティ	|タイプ|	説明
displayName	|String|	ユーザーの表示名
userId  	|String|	ユーザーの識別子
pictureUrl	|String|	プロフィール画像のURL。httpsで指定します。ユーザーがプロフィール画像を設定していない場合はレスポンスに含まれません。
statusMessage	|String|	ユーザーのステータスメッセージ。ユーザーがステータスメッセージを設定していない場合はレスポンスに含まれません。

### リファレンス
https://developers.line.me/ja/docs/social-api/reference/#anchor-7c7c6e9779e9bd5927ee0469a9b15ac44ef5c546


# プロフィール設計の相談
ユーザーがプロフィールで登録する内容の相談です．私は，清家くん提案した内容を満たすプロフィールで問題ないと考えています，追加あるいは削除した方がいい内容はあるでしょうか．

## 清家くんの想定した，プロフィール
* 性別
* 年齢
* 職業(社会的ステータス)
* 趣味
* 目的



## 私的な見解
LINEアカウントでloginをすると，LINEAPIから，ユーザー名，プロフィール画像，ひとこと(statusmessage)，の３つが得られます．しかし，それだけでは@seike くんの提案したプロフィールを満たしません．よって追加でプロフィールを書いて貰う必要があります．


職業か学生か程度は，LINEのひとことで十分かもしれません．厳密に職種や学年を聞きたい場合は，追加で質問することになります．文字列で記述してもらうことになると思います．
趣味は，LINEから判別できないので，新たに必要でしょう．文字列で記述してもらうことになると思います．
目的は，レシコミを使う動機ですから，レシコミ側で，幾つかの応えを用意しておいてそれを選択するのが良いかと思います．同じ目的の人を検索しやすくなります．用意された選択肢(残り物を消費するため,友達を見つけるため...等)は凡庸になりがちで，それを見てもパッとしないという考え方もあります．私見では，この人は友達を見つけたい積極的な人なのか，それともただ残り物を消費したい人なのかを判別できるので，目的は選択式にしてもいいと考えています．

### 目的を分解して，利用目的と利用意欲にすることを提案します
アプリの利用目的は，人それぞれなので，文字列で記述式で良いと思います．
コミュニティに対する人見知り具合，人と会うことに対する抵抗感などを，５段階程度に分け公表すると，意欲を示すことができます．
例1：残り物を減らしたい，利用意欲5
例2：友達を増やしたい，利用意欲3





## プロフィール登録案1
いものを追加で質問します．私的見解のまとめです．

* LINEAPIでユーザー名，プロフィール画像，ひとことを取ってくる．
* 性別 選択
* 年齢 選択
* 職業 記述
* 趣味 記述
* 目的 記述
* 利用意欲 選択
こんな感じで，どうでしょうか．







# 修正したプロフィール設計の相談
ユーザーがプロフィールで登録する内容の相談です．私は，清家くん提案した内容を満たすプロフィールで問題ないと考えています，追加あるいは削除した方がいい内容はあるでしょうか．

## 清家くんの想定した，プロフィール
* 性別
* 年齢
* 職業(社会的ステータス)
* 趣味
* 目的



## 私的な見解
LINEアカウントでloginをすると，LINEAPIから，ユーザー名，プロフィール画像，ひとこと(statusmessage)，の３つが得られます．しかし，それだけでは@seike くんの提案したプロフィールを満たしません．よって追加でプロフィールを書いて貰う必要があります．


職業か学生か程度は，LINEのひとことで十分かもしれません．厳密に職種や学年を聞きたい場合は，追加で質問することになります．文字列で記述してもらうことになると思います．しかし，辛いので分野を選択する方が適当かもしれません．
趣味は，LINEから判別できないので，新たに必要でしょう．文字列で記述してもらうことになると思います．
目的は，レシコミを使う動機ですから，レシコミ側で，幾つかの応えを用意しておいてそれを選択するのが良いかと思います．同じ目的の人を検索しやすくなります．用意された選択肢(残り物を消費するため,友達を見つけるため...等)は凡庸になりがちで，それを見てもパッとしないという考え方もあります．私見では，この人は友達を見つけたい積極的な人なのか，それともただ残り物を消費したい人なのかを判別できるので，目的は選択式にしてもいいと考えています．

### 目的を分解して，利用目的と利用意欲にすることを提案します.
アプリの利用目的は，人それぞれなので，文字列で記述式で良いと思います．
コミュニティに対する人見知り具合，人と会うことに対する抵抗感などを，５段階程度に分け公表すると，意欲を示すことができます．がんがんいこうぜ，など
例1：残り物を減らしたい，利用意欲5
例2：友達を増やしたい，利用意欲3





## プロフィール登録案1

* LINEAPIでユーザー名，プロフィール画像，ひとことを取ってくる．
* 性別 選択
* 年齢 選択
* 職業 記述
* 趣味 記述
* 目的 記述
こんな感じで，どうでしょうか．


## プロフィール最終案

* LINEAPIでユーザー名，プロフィール画像，ひとことを取ってくる．
* 性別 選択
* 年齢 選択
* 職業 記述
* 趣味 記述
* 目的 記述
* 人見知り度 選択

# プロフィール　DBを考えるタスク(プロフィールを入力できるようにする．)
>@psato 一応考えとくと良さそうなのが今プロフィールDBは存在していて,ユーザーDBにはあまりものをいれない(LINEtokenとか)な感じが良さそうっていう雰囲気
>
>
>[5:50] 
>名前はUserに持たせるのが良さそうなのでは?(今の感じはUserにもたせてます) (edited)
enum参考url https://www.sejuku.net/blog/26369

## プロフィール内容
* LINEAPIでユーザー名，プロフィール画像，ひとことを取ってくる．
* 性別 選択
* 年齢 選択
* 職業 記述
* 趣味 記述
* 目的 記述
* 人見知り度 選択

## DB_profiles_テーブル設計方針
userテーブルには極力触れずに,profileテーブルにフィールドを追加していく．

* 性別 文字列定数型enumでmale,femaleの二者択一にする．
* 生年月日 date    index
* 職業 Professionよりjob varchar  index
* 趣味 hobby varchar 
* 目的 purpose varchar






## sqlite
NULL       NULL値
INTEGER    符号付整数。1, 2, 3, 4, 6, or 8 バイトで格納
REAL       浮動小数点数。8バイトで格納
TEXT       テキスト。UTF-8, UTF-16BE or UTF-16-LEのいずれかで格納
BLOB       Binary Large OBject。入力データをそのまま格納

## マイグレーションリセット
bundle exec rake db:rollback
bundle exec rake db:migrate:status




## マイグレーション
be rails generate migration AddbirthdayToprofile sex:integer birthday:date:index job:string:index hobby:string job:string 


### enum
[1] pry(main)> prof = Profile.new(sex:1)
=> #<Profile:0x00007f92761efcc0
 id: nil,
 user_id: nil,
 place_id: nil,
 created_at: nil,
 updated_at: nil,
 sex: "male",
 birthday: nil,
 job: nil,
 hobby: nil>
[2] pry(main)> prof = Profile.new(sex:0)
=> #<Profile:0x00007f9275718dd8
 id: nil,
 user_id: nil,
 place_id: nil,
 created_at: nil,
 updated_at: nil,
 sex: "female",
 birthday: nil,
 job: nil,
 hobby: nil>
[3] pry(main)> quit

参考
https://www.sejuku.net/blog/26369


### dbアプリ
https://www.dbonline.jp/sqlite-db-browser/table/index1.html

### エラー
null規約エラー
直にユーザーデータベースに流し込んでいるファイルがあるので，そこにデータをいれ，nullにしない．

### enumはなし．
やらない．

### ユーザー登録
editは作られていないので，作るべし．
viewはhelperで書く．
sessionからuser_idを取ってくる．
編集するということは，現状を取ってこなければならない．

### railsチュートリアル7章を参考に，
https://railstutorial.jp/chapters/sign_up?version=4.2#sec-signup_form 

### loginのremember_me
https://railstutorial.jp/chapters/log_in_log_out?version=4.2#cha-log_in_log_out
リスト8.47実装したい．

### routes
ルーティングを知るに越したことはない，というか，リンクを張ったり，参照したり，id毎に参照したりっていうのは，routesを見る他無い．
http://localhost:3000/rails/info/routes
コンソールから出すよりも，ブラウザで出したほうが，pathとか(と言うよりヘルパー？)書いてあって，見やすい．


### レンダー

### スライドの入力フォーム
http://blog.inouetakuya.info/entry/2014/01/31/233000

### loginedの画面状態
loginしたにもかかわらず，loginへ行くと，loginフォームが出てくる．これを，profilesが表示されるようにしたい．

### 形態素解析?
* レシピを提示するには，以下の手順がある．

1. ユーザーから食材を入力してもらう．
1. 食材データベースと照合し，APIに入力可能なデータか判断する．
1. 食材データを整形する．
1. レシピAPIに食材を渡す．
1. レシピを返す．

### db設計
まず，DBに残り物の食材を持たせなければいけない．
それと，APIで直接レシピを取ってくるにしろ，
スクレイピングでDBにレシピを保存しているにしろ，
残り物の食材を持たなければいけない．


### bundle_
bundleで，db間の結びつきを再構築する．
しかし，これができない．
仕方がないので，newで作って，createでsave.


```
  def create
    @item = Item.new(item_param)
    if @item.save
      flach[:success] = "食材の登録が完了しました！"
      redirect_to @item
    else
      flash[:fail] = "食材の登録が完了しました！"
      redirect_to @item
    end
  end
```

```
<%= form_for @item do |f| %>

```
#### user_idを同時に挿入する
BTuser_idを同時に挿入するのは，マージという方法を取った．
https://ref.xaio.jp/ruby/classes/hash/merge

本来は，build_とcreate_でできる．



### 削除
      <td><%= link_to "delete", items_path(user_id: @user.id), method: :delete%></td>
      
https://teratail.com/questions/25439

#### 暇人さんに相談した内容
### TODO
<blockquote class="trello-card"><a href="https://trello.com/c/C29pNY74/303-2-%E5%85%A5%E5%8A%9B%E3%81%97%E3%81%9F%E3%83%87%E3%83%BC%E3%82%BF%E3%82%92%E4%BF%9D%E5%AD%98%E3%81%A7%E3%81%8D%E3%82%8B">1. 入力したデータを保存できる</a></blockquote><script src="https://p.trellocdn.com/embed.min.js"></script>


食品をuser_idと一緒に，stringで保存する．
(食品リスト表示は，user_idを用いて出力する．)

ItemsTable
index,user_id,food

### やったこと
new,create,showアクションを，profileを見本に作成．その結果，DBに保存はできないが，不必要にDBから，user_idが同じ食品レコードを取ってくるようになってしまった．


—profile
Userを特定
New プロフィール内容を、送信
Create プロフィール内容を、受け取り、クリエイト、
ないしアップデート
show

-items
Userを特定
New アイテム内容を送信
Create アイテム内容を、Useridとともに、受け取る

—items現状
Userを特定
New アイテム内容を送信      <この時点で，itemレコードを取っていている．よって，updateになっている．
Create アイテム内容を、Useridとともに、受け取る.



#### each do
配列・ハッシュに対して先頭のデータから順に繰り返し全ての処理を行うためのメソッド
'''
配列.each do |変数|
'''


## フィードバック
- google　アナリティクス
- エスノグラフィー

## rails
### @
インスタンス変数の変数名は「@」で始まります。例えば「@name」などです。

アクションから呼び出されたテンプレートでは、呼び出し元のアクションで定義されたインスタンス変数を参照して値を取り出すことができます。

### スコープ
スコープとは

スコープは、変数の有効範囲の事です。スコープの外からは変数は見えないため、変数を参照できなくなっています。

そのスコープに対応するためにRubyには様々な変数が用意されています。

### グローバル変数
グローバル変数

グローバル変数はその名前の通りグローバルな変数です。スコープはプロジェクトの全ての範囲です。

そのため、プロジェクト内で一意であることが保証されている変数のみに使用されます。

思わぬ部分で変数名がかぶってしまいバグやエラーの原因ともなるので、使う場面はよく考えましょう。
'''
$global = "global"

def greet
  p $global
end

greet => “global”
'''

### クラス変数

クラス変数はクラス内で一意に値を持つ変数です。スコープはクラス内です。

下のプログラムはインスタンス変数をクラス変数に変更したサンプルです。

class User
  def initialize(name)
    @@name = name
  end

  def put_name
    p @@name
  end
end

user1 = User.new("taroo")
user2 = User.new("hanako")
user1.put_name => “hanako”
user2.put_name => ”hanako”
インスタンス変数と違いUserの名前がhanakoで上書きされていることがわかります。

クラス変数は思わぬ場面で上書きが起きたりすることもあるため、注意が必要です。

### ローカル変数

ローカル変数は一番スコープが狭い変数です。

変数は定義されたメソッドのみです。

class User
  def initialize(name)
    local_name = name
  end

  def put_name
    p local_name
  end
end

user1 = User.new("taroo")
user2 = User.new("hanako")
user1.put_name
user2.put_name

### findを詳しく解説してる
https://qiita.com/mr-myself/items/cfb936dcf63d2c44d2f5
これも参考になった？かな．．．https://blog.codecamp.jp/rails_text_20

find_byも 指定したモデルのインスタンス（すぐに利用できるデータ）を返しますので、「@user.email」などの使い方ができます。
また、下記のように複数条件の指定も可能です。

@user = User.find_by(email: params[:email], name: '田中太郎')

### cssの読み込みの順番
@importで，cssの読み込みをコントロール
application.html.erbからlinkでapplication.scssを読み込み，そのなかで
諸々をimportで読み込み．


### 暇人さんに相談した内容
'''
/Users/e155755/Desktop/enPiT/enPiT_webapps/anatofuz/enpit_er %
be rails c                                                                                                                              ?[psato_bootswatch]
Loading development environment (Rails 5.1.4)
[1] pry(main)> Rails.application.config.assets.paths
=> ["/Users/e155755/Desktop/enPiT/enPiT_webapps/anatofuz/enpit_er/app/assets/config",
 "/Users/e155755/Desktop/enPiT/enPiT_webapps/anatofuz/enpit_er/app/assets/images",
 "/Users/e155755/Desktop/enPiT/enPiT_webapps/anatofuz/enpit_er/app/assets/javascripts",
 "/Users/e155755/Desktop/enPiT/enPiT_webapps/anatofuz/enpit_er/app/assets/stylesheets",
 "/Users/e155755/Desktop/enPiT/enPiT_webapps/anatofuz/enpit_er/vendor/bundle/ruby/2.4.0/gems/font-awesome-rails-4.7.0.2/app/assets/fonts",
 "/Users/e155755/Desktop/enPiT/enPiT_webapps/anatofuz/enpit_er/vendor/bundle/ruby/2.4.0/gems/font-awesome-rails-4.7.0.2/app/assets/stylesheets",
 "/Users/e155755/Desktop/enPiT/enPiT_webapps/anatofuz/enpit_er/vendor/bundle/ruby/2.4.0/gems/bootswatch-rails-3.3.5/vendor/assets/stylesheets",
 "/Users/e155755/Desktop/enPiT/enPiT_webapps/anatofuz/enpit_er/vendor/bundle/ruby/2.4.0/gems/gmaps4rails-2.1.2/vendor/assets/javascripts",
 "/Users/e155755/Desktop/enPiT/enPiT_webapps/anatofuz/enpit_er/vendor/bundle/ruby/2.4.0/gems/coffee-rails-4.2.2/lib/assets/javascripts",
 "/Users/e155755/Desktop/enPiT/enPiT_webapps/anatofuz/enpit_er/vendor/bundle/ruby/2.4.0/gems/actioncable-5.1.4/lib/assets/compiled",
 "/Users/e155755/Desktop/enPiT/enPiT_webapps/anatofuz/enpit_er/vendor/bundle/ruby/2.4.0/gems/actionview-5.1.4/lib/assets/compiled",
 "/Users/e155755/Desktop/enPiT/enPiT_webapps/anatofuz/enpit_er/vendor/bundle/ruby/2.4.0/gems/turbolinks-source-5.0.3/lib/assets/javascripts",
 "/Users/e155755/Desktop/enPiT/enPiT_webapps/anatofuz/enpit_er/assets/stylesheets/bootswatch/sketchy",
 #<Pathname:/Users/e155755/Desktop/enPiT/enPiT_webapps/anatofuz/enpit_er/node_modules>,
 "/Users/e155755/Desktop/enPiT/enPiT_webapps/anatofuz/enpit_er/vendor/bundle/ruby/2.4.0/gems/bootstrap-sass-3.3.7/assets/stylesheets",
 "/Users/e155755/Desktop/enPiT/enPiT_webapps/anatofuz/enpit_er/vendor/bundle/ruby/2.4.0/gems/bootstrap-sass-3.3.7/assets/javascripts",
 "/Users/e155755/Desktop/enPiT/enPiT_webapps/anatofuz/enpit_er/vendor/bundle/ruby/2.4.0/gems/bootstrap-sass-3.3.7/assets/fonts",
 "/Users/e155755/Desktop/enPiT/enPiT_webapps/anatofuz/enpit_er/vendor/bundle/ruby/2.4.0/gems/bootstrap-sass-3.3.7/assets/images"]
[2] pry(main)> quit




わからないこと
bootstrapのテーマを入れられない．
bootswatchからテーマをダウンロードしたが，読み込めない．

cssから，scssにすると，エラーがでる．

以下はいらないエラーを吐いていた部分．

assets.rb
Rails.application.config.assets.precompile += [/^[-_a-zA-Z0-9]*\..*/]
Rails.application.config.assets.precompile += [/.*\.css/] 
Rails.application.config.assets.precompile += [/.*\.scss/]
Rails.application.config.assets.precompile += [/.*\.sass/] 


production.rb
  config.assets.precompile << /(^[^_\/]|\/[^_])[^\/]*$/

  config.assets.precompile += ["*.js", "*.css", "jquery-migrate-rails.js"]
'''

### bootswatchの文字のフォントが日本語対応しない．
