# coding: utf-8

import random
import math
import copy
import operator
import pandas as pd

N_ITEMS = 20 #150 #20
N_POP = 20 #150 #20
N_GEN = 25 #
MUTATE_PROB = 0.1
ELITE_RATE = 0.5


class GA:
    def __init__(self):
        self.items = {}
        self.fitness_master = {}

    def main(self):
        pop = [{'param': p} for p in self.get_population()]

        for g in range(N_GEN):
            print 'Generation%3s:' % str(g),

            # Get elites
            fitness = self.evaluate(pop)
            elites = fitness[:int(len(pop) * ELITE_RATE)]

            # Cross and mutate
            pop = elites[:]
            while len(pop) < N_POP:
                if random.random() < MUTATE_PROB:
                    m = random.randint(0, len(elites) - 1)
                    child = self.mutate(elites[m]['param'])
                else:
                    c1 = random.randint(0, len(elites) - 1)
                    c2 = random.randint(0, len(elites) - 1)
                    child = self.crossover(elites[c1]['param'], elites[c2]['param'])
                pop.append({'param': child})

            # Evaluate indivisual
            fitness = self.evaluate(pop)
            pop = fitness[:]

            print pop[0]['score0'], pop[0]['score1'], pop[0]['param']

    def get_population(self):
        items = {0: (1, 90.5), 1: (2, 122), 2: (3, 85.5), 3: (4, 4), 4: (5, 210), 5: (6, 155), 6: (7, 4), 7: (8, 48),
                 8: (9, 235), 9: (10, 56), 10: (11, 52.6), 11: (12, 55.4), 12: (13, 460), 13: (14, 40.5), 14: (15, 220),
                 15: (16, 39.5), 16: (17, 13), 17: (18, 0.1), 18: (19, 30), 19: (20, 130), 20: (21, 132.5),
                 21: (22, 29), 22: (23, 24.5), 23: (24, 54), 24: (25, 25), 25: (26, 49.8), 26: (27, 50.2),
                 27: (28, 120), 28: (29, 80), 29: (30, 60), 30: (31, 59), 31: (32, 76.6), 32: (33, 95), 33: (34, 36.5),
                 34: (35, 30), 35: (36, 55), 36: (37, 60), 37: (38, 62), 38: (39, 44.5), 39: (40, 35), 40: (41, 40),
                 41: (42, 78.5), 42: (43, 9.5), 43: (44, 8.5), 44: (45, 88.4), 45: (46, 30), 46: (47, 80),
                 47: (48, 300), 48: (49, 120), 49: (50, 39), 50: (51, 9), 51: (52, 30), 52: (53, 16.5), 53: (54, 66.6),
                 54: (55, 45), 55: (56, 60), 56: (57, 29.5), 57: (58, 19.9), 58: (59, 6), 59: (60, 6.9), 60: (61, 210),
                 61: (62, 30), 62: (63, 75.6), 63: (64, 3.3), 64: (65, 19), 65: (66, 12), 66: (67, 9.9), 67: (68, 32),
                 68: (69, 32), 69: (70, 54), 70: (71, 56.5), 71: (72, 60), 72: (73, 6.5), 73: (74, 65.5),
                 74: (75, 34.6), 75: (76, 6.5), 76: (77, 11.5), 77: (78, 7.5), 78: (79, 36), 79: (80, 70.5),
                 80: (81, 22.5), 81: (82, 1.8), 82: (83, 19), 83: (84, 120), 84: (85, 85.2), 85: (86, 115),
                 86: (87, 0.1), 87: (88, 12.4), 88: (89, 19.5), 89: (90, 20), 90: (91, 100), 91: (92, 28),
                 92: (93, 19.5), 93: (94, 29.5), 94: (95, 19.6), 95: (96, 105), 96: (97, 12.5), 97: (98, 33.3),
                 98: (99, 18.6), 99: (100, 40), 100: (101, 25), 101: (102, 55), 102: (103, 38), 103: (104, 2.5),
                 104: (105, 32.4), 105: (106, 65), 106: (107, 0.8), 107: (108, 8.6), 108: (109, 55), 109: (110, 5.5),
                 110: (111, 7), 111: (112, 9), 112: (113, 15.5), 113: (114, 6.4), 114: (115, 18.5), 115: (116, 30),
                 116: (117, 90), 117: (118, 39), 118: (119, 4), 119: (120, 6), 120: (121, 34.5), 121: (122, 20),
                 122: (123, 19.5), 123: (124, 30), 124: (125, 5.4), 125: (126, 15), 126: (127, 8.8), 127: (128, 6.5),
                 128: (129, 35), 129: (130, 15), 130: (131, 3.5), 131: (132, 4.2), 132: (133, 12), 133: (134, 6.9),
                 134: (135, 4), 135: (136, 54.5), 136: (137, 1), 137: (138, 7.5), 138: (139, 10.4), 139: (140, 32),
                 140: (141, 40.6), 141: (142, 2), 142: (143, 5.4), 143: (144, 45.5), 144: (145, 7.5), 145: (146, 29.5),
                 146: (147, 10), 147: (148, 3.2), 148: (149, 2.9), 149: (150, 10), 150: (151, 9.9)}
        #items = {0: (1,90.5),1: (2,122),2: (3,85.5),3: (4,4),4: (5,210),5: (6,155),6: (7,4),7: (8,48),8: (9,235),9: (10,56),10: (11,52.6),11: (12,55.4),12: (13,460),13: (14,40.5),14: (15,220),15: (16,39.5),16: (17,13),17: (18,0.1),18: (19,30),19: (20,130),20: (21,132.5),21: (22,29),22: (23,24.5),23: (24,54),24: (25,25),25: (26,49.8),26: (27,50.2),27: (28,120),28: (29,80),29: (30,60),30: (31,59),31: (32,76.6),32: (33,95),33: (34,36.5),34: (35,30),35: (36,55),36: (37,60),37: (38,62),38: (39,44.5),39: (40,35),40: (41,40),41: (42,78.5),42: (43,9.5),43: (44,8.5),44: (45,88.4),45: (46,30),46: (47,80),47: (48,300),48: (49,120),49: (50,39),50: (51,9),51: (52,30),52: (53,16.5),53: (54,66.6),54: (55,45),55: (56,60),56: (57,29.5),57: (58,19.9),58: (59,6),59: (60,6.9),60: (61,210),61: (62,30),62: (63,75.6),63: (64,3.3),64: (65,19),65: (66,12),66: (67,9.9),67: (68,32),68: (69,32),69: (70,54),70: (71,56.5),71: (72,60),72: (73,6.5),73: (74,65.5),74: (75,34.6),75: (76,6.5),76: (77,11.5),77: (78,7.5),78: (79,36),79: (80,70.5),80: (81,22.5),81: (82,1.8),82: (83,19),83: (84,120),84: (85,85.2),85: (86,115),86: (87,0.1),87: (88,12.4),88: (89,19.5),89: (90,20),90: (91,100),91: (92,28),92: (93,19.5),93: (94,29.5),94: (95,19.6),95: (96,105),96: (97,12.5),97: (98,33.3),98: (99,18.6),99: (100,40),100: (101,25),101: (102,55),102: (103,38),103: (104,2.5),104: (105,32.4),105: (106,65),106: (107,0.8),107: (108,8.6),108: (109,55),109: (110,5.5),110: (111,7),111: (112,9),112: (113,15.5),113: (114,6.4),114: (115,18.5),115: (116,30),116: (117,90),117: (118,39),118: (119,4),119: (120,6),120: (121,34.5),121: (122,20),122: (123,19.5),123: (124,30),124: (125,5.4),125: (126,15),126: (127,8.8),127: (128,6.5),128: (129,35),129: (130,15),130: (131,3.5),131: (132,4.2),132: (133,12),133: (134,6.9),134: (135,4),135: (136,54.5),136: (137,1),137: (138,7.5),138: (139,10.4),139: (140,32),140: (141,40.6),141: (142,2),142: (143,5.4),143: (144,45.5),144: (145,7.5),145: (146,29.5),146: (147,10),147: (148,3.2),148: (149,2.9),149: (150,10),150: (151,9.9)}
        #items = {0: (1,90.5),1: (2,122),2: (3,85.5),3: (4,4),4: (5,210),5: (6,155),6: (7,4),7: (8,48),8: (9,235),9: (10,56),10: (11,52.6),11: (12,55.4),12: (13,460),13: (14,40.5),14: (15,220),15: (16,39.5),16: (17,13),17: (18,0.1),18: (19,30),19: (20,130)}

        # Make population
        pop = []
        for i in range(N_POP):
            ind = [self.items[k] for k in random.sample(range(N_ITEMS), 5)]
            pop.append(ind)

        return pop

    def clac_score(self, indivisual):
        dic = {}
        dic['score0'] = 0  # value
        dic['score1'] = 0  # weight
        for ind in indivisual:
            dic['score0'] += ind[0]
            dic['score1'] += ind[1]

        return dic

    def evaluate(self, pop):
        fitness = []
        for p in pop:
            if not p.has_key('score0'):
                # The indivisual made by crossover or mutation existed before
                if self.fitness_master.has_key(str(p['param'])):
                    p.update(self.fitness_master[str(p['param'])])
                # The indivisual is the first
                else:
                    p.update(self.clac_score(p['param']))
                fitness.append(p)
            else:
                fitness.append(p)

        # Save fitness to all genaration dictinary
        for fit in fitness:
            param = fit['param']
            self.fitness_master[str(param)] = {k: v for k, v in fit.items() if k != 'param'}

        # This generation fitness
        df = pd.DataFrame(fitness)
        df = df.sort(['score0', 'score1'], ascending=[True, True])

        fitness = df.to_dict('records')

        return fitness

    def mutate(self, parent):
        ind_idx = int(math.floor(random.random() * len(parent)))
        item_idx = random.choice(range(N_ITEMS))
        child = copy.deepcopy(parent)
        child[ind_idx] = self.items[item_idx]

        return child

    def crossover(self, parent1, parent2):
        length = len(parent1)
        r1 = int(math.floor(random.random() * length))
        r2 = r1 + int(math.floor(random.random() * (length - r1)))

        child = copy.deepcopy(parent1)
        child[r1:r2] = parent2[r1:r2]

        return child


if __name__ == "__main__":
    GA().main()
