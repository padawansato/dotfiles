
((digest . "68b329da9893e34099c7d8ad5cb9c940") (undo-list nil ("IMG_3022.CR2.jpg IMG_3032.CR2.jpg IMG_3060.CR2.jpg IMG_3065.CR2.jpg IMG_3023.CR2.jpg IMG_3038.CR2.jpg IMG_3061.CR2.jpg IMG_3066.CR2.jpg IMG_3025.CR2.jpg IMG_3055.CR2.jpg IMG_3062.CR2.jpg IMG_3067.CR2.jpg IMG_3027.CR2.jpg IMG_3057.CR2.jpg IMG_3063.CR2.jpg IMG_3069.CR2.jpg IMG_3030.CR2.jpg IMG_3058.CR2.jpg IMG_3064.CR2.jpg IMG_3071.CR2.jpg " . 1) ((marker . 1) . -340) ((marker . 1) . -340) nil (340 . 341) nil ("
" . 273) nil ("k" . -273) ((marker . 1) . -1) 274 nil (272 . 274) nil ("
" . 205) nil (204 . 205) nil (136 . 137) nil ("
" . 136) nil ("
" . 69) nil (68 . 69) nil (1 . 341) nil ("
|!(arp or dns or icmp) - |(Masks out arp, dns, icmp, or whatever other protocols that may be clouding an issue)||
|tcp.stream eq 0 |(This is best to apply by right-clicking a TCP packet in a connection that you want to display and selecting Follow | TCP Stream. This will display all packets in the TCP conversation as well as the packet content if not encrypted)|
|sip or rtp|(This displays all sip control and rtp frames in the trace) |


```
[root@d-lab2]/home/n-lab# tshark -i 1 -R \"http.request or http.response\" -a duration:10
tshark: -R without -2 is deprecated. For single-pass filtering use -Y.
Running as user \"root\" and group \"root\". This could be dangerous.
Capturing on 'enp0s29f7u2'
 15 1.237153974   10.0.2.232 -> 239.255.255.250 SSDP 220 M-SEARCH * HTTP/1.1 
 26 2.237214445   10.0.2.232 -> 239.255.255.250 SSDP 220 M-SEARCH * HTTP/1.1 
 73 7.578576897   10.0.2.232 -> 239.255.255.250 SSDP 220 M-SEARCH * HTTP/1.1 
3 packets captured
```



```
[root@d-lab2]/home/n-lab# tshark -i 1 -Y \"ip.addr eq 10.0.0.1 and ip.addr eq 192.168.1.1\" -a duration:10
Running as user \"root\" and group \"root\". This could be dangerous.
Capturing on 'enp0s29f7u2'
0 packets captured
```


```
[root@d-lab2]/home/n-lab# tshark -i 1 -R \"http.request or http.response\" -a duration:1
tshark: -R without -2 is deprecated. For single-pass filtering use -Y.
Running as user \"root\" and group \"root\". This could be dangerous.
Capturing on 'enp0s29f7u2'
  7 0.400555509   10.0.1.184 -> 239.255.255.250 SSDP 221 M-SEARCH * HTTP/1.1 
1 packet captured

```


## tor
torはsslを使っているようだから，torブラウザのを使ってみて，検証する．
```
[root@d-lab2]/home/n-lab# tshark -i 1 -R \"ssl\"  -a duration:10 
tshark: -R without -2 is deprecated. For single-pass filtering use -Y.
Running as user \"root\" and group \"root\". This could be dangerous.
Capturing on 'enp0s29f7u2'
  8 0.775729911 49.102.153.234 -> 10.0.1.113   TLSv1.2 108 Application Data
1 packet captured

```
sslを用いた通信が１つ発見された．

# wiresharkについての総括
　wiresharkを用いた学科サーバーのパケットのキャプチャを行い，キャプチャできる範囲で，再送が起きていることが分かった．拾える帯域が大きい端末ならば，より良い結果が得られただろう．



# wiresharkの参考文献
http://www.lovemytool.com/blog/2016/02/wireshark-20-top-10-filters-by-chris-greer.html
http://n.pentest.ninja/?p=202















# snort
snortを用いたパケットのキャプチャを行う．

## snortについて
snortとは不正侵入検出ソフトウェアの１つ．IDS（Intrusion Detection System）とも呼ばれる．


## テスト実行

```
[root@d-lab2]/var/log/snort# snort -T -c /etc/snort/snort.conf
Running in Test mode

        --== Initializing Snort ==--
Initializing Output Plugins!
Initializing Preprocessors!
Initializing Plug-ins!
Parsing Rules file \"/etc/snort/snort.conf\"
PortVar 'HTTP_PORTS' defined :  [ 80:81 311 383 591 593 901 1220 1414 1741 1830 2301 2381 2809 3037 3128 3702 4343 4848 5250 6988 7000:7001 7144:7145 7510 7777 7779 8000 8008 8014 8028 8080 8085 8088 8090 8118 8123 8180:8181 8243 8280 8300 8800 8888 8899 9000 9060 9080 9090:9091 9443 9999 11371 34443:34444 41080 50002 55555 ]
PortVar 'SHELLCODE_PORTS' defined :  [ 0:79 81:65535 ]
PortVar 'ORACLE_PORTS' defined :  [ 1024:65535 ]
PortVar 'SSH_PORTS' defined :  [ 22 ]
PortVar 'FTP_PORTS' defined :  [ 21 2100 3535 ]
PortVar 'SIP_PORTS' defined :  [ 5060:5061 5600 ]
PortVar 'FILE_DATA_PORTS' defined :  [ 80:81 110 143 311 383 591 593 901 1220 1414 1741 1830 2301 2381 2809 3037 3128 3702 4343 4848 5250 6988 7000:7001 7144:7145 7510 7777 7779 8000 8008 8014 8028 8080 8085 8088 8090 8118 8123 8180:8181 8243 8280 8300 8800 8888 8899 9000 9060 9080 9090:9091 9443 9999 1


(中略)



WARNING: flowbits key 'file.ht3' is set but not ever checked.
328 out of 1024 flowbits in use.

[ Port Based Pattern Matching Memory ]
+- [ Aho-Corasick Summary ] -------------------------------------
| Storage Format    : Full-Q 
| Finite Automaton  : DFA
| Alphabet Size     : 256 Chars
| Sizeof State      : Variable (1,2,4 bytes)
| Instances         : 373
|     1 byte states : 356
|     2 byte states : 17
|     4 byte states : 0
| Characters        : 195395
| States            : 151912
| Transitions       : 22790348
| State Density     : 58.6%
| Patterns          : 9967
| Match States      : 10770
| Memory (MB)       : 78.27
|   Patterns        : 1.13
|   Match Lists     : 2.53
|   DFA
|     1 byte states : 2.02
|     2 byte states : 71.93
|     4 byte states : 0.00
+----------------------------------------------------------------
[ Number of patterns truncated to 20 bytes: 553 ]

        --== Initialization Complete ==--

   ,,_     -*> Snort! <*-
  o\"  )~   Version 2.9.8.2 GRE (Build 335) 
   ''''    By Martin Roesch & The Snort Team: http://www.snort.org/contact#team
           Copyright (C) 2014-2015 Cisco and/or its affiliates. All rights reserved.
           Copyright (C) 1998-2013 Sourcefire, Inc., et al.
           Using libpcap version 1.5.3
           Using PCRE version: 8.32 2012-11-30
           Using ZLIB version: 1.2.7

           Rules Engine: SF_SNORT_DETECTION_ENGINE  Version 2.6  <Build 1>
           Preprocessor Object: SF_SSLPP  Version 1.1  <Build 4>
           Preprocessor Object: SF_SSH  Version 1.1  <Build 3>
           Preprocessor Object: SF_SMTP  Version 1.1  <Build 9>
           Preprocessor Object: SF_SIP  Version 1.1  <Build 1>
           Preprocessor Object: SF_SDF  Version 1.1  <Build 1>
           Preprocessor Object: SF_REPUTATION  Version 1.1  <Build 1>
           Preprocessor Object: SF_POP  Version 1.0  <Build 1>
           Preprocessor Object: SF_MODBUS  Version 1.1  <Build 1>
           Preprocessor Object: SF_IMAP  Version 1.0  <Build 1>
           Preprocessor Object: SF_GTP  Version 1.1  <Build 1>
           Preprocessor Object: SF_FTPTELNET  Version 1.2  <Build 13>
           Preprocessor Object: SF_DNS  Version 1.1  <Build 4>
           Preprocessor Object: SF_DNP3  Version 1.1  <Build 1>
           Preprocessor Object: SF_DCERPC2  Version 1.0  <Build 3>

Snort successfully validated the configuration!
Snort exiting

```

## 設定ファイル場所

```
[n-lab@d-lab2]~% sudo find / -type f -name snort.conf
/home/n-lab/snort/etc/snort.conf
/home/n-lab/snort/community-rules/snort.conf
/etc/snort/snort.conf
/etc/snort/rules/snort.conf　### これ
```

## 設定ファイル

```
[root@d-lab2]/home/n-lab# vim /etc/snort/rules/snort.conf

```

## エラーの例

ERROR: /etc/snort/rules/snort.conf(243) Could not stat dynamic module path \"/usr/local/lib/snort_dynamicpreprocessor/\": No such file or directory.

dynamicengine /usr/local/lib/snort_dynamicengine/libsf_engine.so

wget http://www.snort.org/dl/snort-current/snort-2.9.5.6.tar.gz    -O snort-2.9.5.6.tar.gz

[root@d-lab2]/usr/local/src# curl ifconfig.me
133.13.48.133


## グローバルip
[root@d-lab2]/etc/snort# curl ifconfig.co
133.13.48.133


## 最終的実行コマンド
[root@d-lab2]/var/log/snort# snort -c /etc/snort/snort.conf -l /var/log/snort/ -i enp0s29f7u2 -A fast -b -d -D



## local.rule
pingをキャプチャするルール設定．
```
# vi /etc/snort/rules/local.rules
 
alert icmp any any -> any any (msg:\"ICMP Testing Rule\"; sid:1000001; rev:1;)
```
### icmpパケットとは
「ICMP」は”Internet Control Message Protocol”の略で、文字通りIPメッセージ
が送信元から相手に届くまでの間に起きたエラー関連の情報を送信元に通知するためのプロトコル

### pingキャプチャの結果の一部
```
[n-lab@d-lab2]/var/log/snort% tail alert
07/20-14:57:06.593257  [**] [1:1000001:1] ICMP Testing Rule [**] [Priority: 0] {IPV6-ICMP} fe80::c57:b986:89e1:a59 -> ff02::16
07/20-14:57:06.772969  [**] [1:1000001:1] ICMP Testing Rule [**] [Priority: 0] {IPV6-ICMP} fe80::8a90:8dff:feb9:74e7 -> ff02::1:ff29:1b8b
07/20-14:57:10.241795  [**] [1:1000001:1] ICMP Testing Rule [**] [Priority: 0] {IPV6-ICMP} 2001:2f8:1c:a504:4c8:216e:7770:afaa -> ff02::1:ff15:d29f
07/20-14:57:11.243029  [**] [1:1000001:1] ICMP Testing Rule [**] [Priority: 0] {IPV6-ICMP} 2001:2f8:1c:a504:4c8:216e:7770:afaa -> ff02::1:ff15:d29f
07/20-14:57:12.244137  [**] [1:1000001:1] ICMP Testing Rule [**] [Priority: 0] {IPV6-ICMP} 2001:2f8:1c:a504:4c8:216e:7770:afaa -> ff02::1:ff15:d29f
07/20-14:57:14.246685  [**] [1:1000001:1] ICMP Testing Rule [**] [Priority: 0] {IPV6-ICMP} 2001:2f8:1c:a504:4c8:216e:7770:afaa -> ff02::1:ff15:d29f
07/20-14:57:14.358106  [**] [1:1000001:1] ICMP Testing Rule [**] [Priority: 0] {IPV6-ICMP} 2001:2f8:1c:a504:4c8:216e:7770:afaa -> ff02::1:ff15:d29f
07/20-14:57:15.369164  [**] [1:1000001:1] ICMP Testing Rule [**] [Priority: 0] {IPV6-ICMP} 2001:2f8:1c:a504:4c8:216e:7770:afaa -> ff02::1:ff15:d29f
07/20-14:57:33.960952  [**] [1:1000001:1] ICMP Testing Rule [**] [Priority: 0] {IPV6-ICMP} fe80::8a90:8dff:feb9:74e7 -> ff02::1:ff7c:d917
07/20-14:57:35.051162  [**] [1:1000001:1] ICMP Testing Rule [**] [Priority: 0] {IPV6-ICMP} fe80::8a90:8dff:feb9:74e7 -> ff02::1:ff7c:d917
[n-lab@d-lab2]/var/log/snort% tail alert                  
07/20-15:05:03.938349  [**] [1:1000001:1] ICMP Testing Rule [**] [Priority: 0] {IPV6-ICMP} fe80::8a90:8dff:feb9:74e7 -> ff02::1:ff81:400f
07/20-15:05:04.999285  [**] [1:1000001:1] ICMP Testing Rule [**] [Priority: 0] {IPV6-ICMP} fe80::8a90:8dff:feb9:74e7 -> ff02::1:ff81:400f
07/20-15:05:07.088632  [**] [1:1000001:1] ICMP Testing Rule [**] [Priority: 0] {IPV6-ICMP} fe80::8a90:8dff:feb9:74e7 -> ff02::1:ff81:400f
07/20-15:05:08.197968  [**] [1:1000001:1] ICMP Testing Rule [**] [Priority: 0] {IPV6-ICMP} fe80::8a90:8dff:feb9:74e7 -> ff02::1:ff81:400f
07/20-15:05:09.258255  [**] [1:1000001:1] ICMP Testing Rule [**] [Priority: 0] {IPV6-ICMP} fe80::8a90:8dff:feb9:74e7 -> ff02::1:ff81:400f
07/20-15:05:26.764798  [**] [1:1000001:1] ICMP Testing Rule [**] [Priority: 0] {IPV6-ICMP} fe80::8ced:9b94:2458:4018 -> ff02::16
07/20-15:05:26.783533  [**] [1:1000001:1] ICMP Testing Rule [**] [Priority: 0] {IPV6-ICMP} fe80::8ced:9b94:2458:4018 -> ff02::16
07/20-15:05:26.785550  [**] [1:1000001:1] ICMP Testing Rule [**] [Priority: 0] {IPV6-ICMP} fe80::8ced:9b94:2458:4018 -> ff02::16
07/20-15:05:26.787695  [**] [1:1000001:1] ICMP Testing Rule [**] [Priority: 0] {IPV6-ICMP} fe80::8ced:9b94:2458:4018 -> ff02::16
07/20-15:05:27.129712  [**] [1:1000001:1] ICMP Testing Rule [**] [Priority: 0] {IPV6-ICMP} fe80::8ced:9b94:2458:4018 -> ff02::16
```

## プリンタへの接続を確認していると思われるping
logを見ていたところ，以下のようなlogが見つかった．

```
07/20-15:09:36.674907  [**] [1:1000001:1] ICMP Testing Rule [**] [Priority: 0] {ICMP} 10.100.10.40 -> 10.0.1.216
```
### 筆者の初見と考察
10.0.1.216にブラウザからアクセスしたところ，fujixeroxのプリンタであった．よって上記のパケットはネットワークに繋がったプリンタに対して，接続を確認していると思われる．

### 先生の談
nakagusukuに対し，接続したいprinterが要求するパケットを投げ，それを拒否するパケットが帰ってきた際のlogであると考えられる．


" . 1) ((marker . 2) . -10267) ((marker . 1) . -10267) ((marker) . -10267) nil ("uest. Awesome way to measure HTTP performance!! Also great to add as a column)|" . 1) nil (1 . 10347) nil ("IMG_3022.CR2.jpg IMG_3032.CR2.jpg IMG_3060.CR2.jpg IMG_3065.CR2.jpg" . 1) nil (1 . 68) nil ("IMG_3022.CR2.jpg IMG_3032.CR2.jpg IMG_3060.CR2.jpg IMG_3065.CR2.jpg" . 1) nil (1 . 68) (t . 0)))
